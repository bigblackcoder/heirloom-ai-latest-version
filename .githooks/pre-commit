#!/bin/bash

# Pre-commit hook to check for credentials before allowing commits
# To use this hook, run:
# git config core.hooksPath .githooks

echo "Running pre-commit hook for credential scanning..."

# Define patterns to search for
PATTERNS=(
    "AKIA[0-9A-Z]{16}" # AWS Access Key ID
    "aws_access_key_id"
    "aws_secret_access_key"
    "[0-9a-zA-Z/+]{40}" # Common pattern for AWS Secret Keys
    "password.*=.*[a-zA-Z0-9]+"
    "secret.*=.*[a-zA-Z0-9]+"
    "token.*=.*[a-zA-Z0-9]+"
    "BEGIN (RSA|DSA|EC|OPENSSH|PRIVATE) KEY"
    "-----BEGIN CERTIFICATE"
)

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# If no files are staged, exit
if [[ -z "$STAGED_FILES" ]]; then
    echo "No files staged for commit. Skipping credential check."
    exit 0
fi

# Set colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

echo -e "${BLUE}${BOLD}Scanning staged files for potential credentials...${NC}"

# Track if credentials were found
FOUND_CREDENTIALS=0

# Check text files for credential patterns
for file in $STAGED_FILES; do
    # Skip binary files and non-existent files
    if [[ ! -f "$file" ]]; then
        continue
    fi

    # Use file command to check if it's a text file
    if file "$file" | grep -q "text\|ASCII"; then
        for pattern in "${PATTERNS[@]}"; do
            if grep -E "$pattern" "$file" > /dev/null 2>&1; then
                echo -e "${RED}${BOLD}Potential credential found in:${NC} $file"
                echo -e "${YELLOW}Matched pattern:${NC} $pattern"
                echo -e "${YELLOW}Excerpts:${NC}"
                grep -E -n -A 1 -B 1 "$pattern" "$file" | sed 's/^/    /'
                echo ""
                FOUND_CREDENTIALS=$((FOUND_CREDENTIALS + 1))
                break
            fi
        done
    fi
done

# Special check for SVG files
SVG_FILES=$(echo "$STAGED_FILES" | grep -E '\.svg$')
if [[ -n "$SVG_FILES" ]]; then
    echo -e "${BLUE}${BOLD}Checking SVG files for embedded data that might contain credentials...${NC}"
    
    for file in $SVG_FILES; do
        # Check for embedded base64 data
        if grep -q 'xlink:href="data:' "$file"; then
            echo -e "${YELLOW}${BOLD}Warning:${NC} SVG file contains embedded data: $file"
            echo -e "${YELLOW}Embedded data in SVGs may leak sensitive information.${NC}"
            echo -e "${YELLOW}Please review the file before committing.${NC}"
            
            # Extract and analyze base64 data for credential patterns
            base64_data=$(grep -o 'xlink:href="data:[^"]*' "$file" | cut -d'"' -f2)
            if [[ -n "$base64_data" ]]; then
                if echo "$base64_data" | grep -q "base64,"; then
                    encoded_part=$(echo "$base64_data" | sed 's/^.*base64,//')
                    # Try to decode and check for credential patterns
                    if echo "$encoded_part" | base64 -d 2>/dev/null | grep -E "AKIA[0-9A-Z]{16}|[0-9a-zA-Z/+]{40}" > /dev/null; then
                        echo -e "${RED}${BOLD}CRITICAL: Potential AWS credentials found in embedded data of:${NC} $file"
                        echo -e "${RED}${BOLD}Commit rejected. Please remove credentials before committing.${NC}"
                        FOUND_CREDENTIALS=$((FOUND_CREDENTIALS + 1))
                    fi
                fi
            fi
        fi
        
        # Check for image0_1097_3250 pattern (the specific pattern flagged in security scan)
        if grep -q "image0_1097_3250" "$file"; then
            echo -e "${RED}${BOLD}Found known vulnerable pattern in:${NC} $file"
            echo -e "${RED}${BOLD}This matches the pattern identified in security scans.${NC}"
            FOUND_CREDENTIALS=$((FOUND_CREDENTIALS + 1))
        fi
    done
fi

# Decide whether to allow the commit
if [[ $FOUND_CREDENTIALS -eq 0 ]]; then
    echo -e "${GREEN}${BOLD}No potential credentials found. Commit allowed.${NC}"
    exit 0
else
    echo -e "${RED}${BOLD}Found ${FOUND_CREDENTIALS} file(s) with potential credentials.${NC}"
    echo -e "${RED}${BOLD}Commit rejected. Please remove credentials before committing.${NC}"
    echo -e "${YELLOW}To override this check (USE WITH CAUTION), use: git commit --no-verify${NC}"
    echo -e "${YELLOW}Review docs/SECURITY.md for guidance on handling credentials.${NC}"
    exit 1
fi