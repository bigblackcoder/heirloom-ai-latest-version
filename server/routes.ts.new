import type { Express, Response } from "express";
import type { Request as ExpressRequest } from "express";
import type { FileArray, UploadedFile } from "express-fileupload";

// Extend Request type to include files for express-fileupload
interface Request extends ExpressRequest {
  files?: FileArray;
}
import { createServer, type Server } from "http";
import fileUpload from "express-fileupload";
import { storage } from "./storage";
import { 
  insertUserSchema, 
  insertIdentityCapsuleSchema,
  insertVerifiedDataSchema,
  insertAiConnectionSchema,
  insertActivitySchema 
} from "@shared/schema";
import { z } from "zod";
import { verifyFace, detectFaceBasic } from "./deepface";
import { verifyFace as verifyFaceAPI, verifyVideo } from "./verification_proxy";
import { log } from "./vite";
import { blockchainService } from "./blockchain/service";
import { requireAuth, requireVerified } from "./middleware/auth";
import { Router } from 'express';

// Mock implementations for Apple FaceID and Google Biometric Auth (replace with actual SDK integrations)
const mockAppleFaceIdVerification = async (): Promise<boolean> => {
  // Simulate successful FaceID verification
  return true;
};

const mockGoogleBiometricVerification = async (): Promise<boolean> => {
  // Simulate successful Google Biometric verification
  return true;
};

export async function registerRoutes(app: Express): Promise<Server> {
  // Hybrid Authentication Routes

  app.post("/api/auth/hybrid/faceid", async (req: Request, res: Response) => {
    try {
      const { image } = req.body;

      if (!image) {
        return res.status(400).json({ message: "Image is required" });
      }

      // 1. Verify face using DeepFace
      const deepFaceResult = await verifyFace(image, undefined, false); // Do not save to DB initially

      if (!deepFaceResult.success) {
        return res.status(400).json({ message: "DeepFace verification failed", details: deepFaceResult.message });
      }

      // 2. Mock Apple FaceID verification
      const faceIdResult = await mockAppleFaceIdVerification();

      if (!faceIdResult) {
        return res.status(400).json({ message: "Apple FaceID verification failed" });
      }

      // If both verifications pass, register/login user
      // Here, you'd typically create a new user or log in an existing user
      // For simplicity, let's assume we create a new user with a generated username

      const username = `user_${Date.now()}`;
      const userData = { username, password: "defaultPassword" }; // Replace 'defaultPassword' with a secure method

      const newUser = await storage.createUser(userData);

      // Don't return the password
      const { password, ...userResponse } = newUser;

      // Create initial identity capsule
      const capsule = await storage.createCapsule({
        userId: newUser.id,
        name: "Primary",
        description: "Your primary identity capsule"
      });

      // Log activity
      await storage.createActivity({
        userId: newUser.id,
        type: "account-created",
        description: "Account created successfully via Hybrid Auth",
        metadata: { capsuleId: capsule.id }
      });

      // Create session
      req.session.userId = newUser.id;
      req.session.isVerified = true;

      res.status(201).json({ message: "User registered/logged in successfully via Hybrid Auth", user: userResponse });
    } catch (error) {
      console.error("Hybrid Auth (FaceID) error:", error);
      res.status(500).json({ message: "Error during Hybrid Auth (FaceID)" });
    }
  });

  app.post("/api/auth/hybrid/googlebio", async (req: Request, res: Response) => {
    try {
      const { biometricData } = req.body;

      if (!biometricData) {
        return res.status(400).json({ message: "Biometric data is required" });
      }

      // 1. Verify biometric data using Google Biometric Auth
      const googleBioResult = await mockGoogleBiometricVerification();

      if (!googleBioResult) {
        return res.status(400).json({ message: "Google Biometric verification failed" });
      }

      // If verification passes, register/login user
      // Here, you'd typically create a new user or log in an existing user
      // For simplicity, let's assume we create a new user with a generated username

      const username = `user_${Date.now()}`;
      const userData = { username, password: "defaultPassword" }; // Replace 'defaultPassword' with a secure method

      const newUser = await storage.createUser(userData);

      // Don't return the password
      const { password, ...userResponse } = newUser;

      // Create initial identity capsule
      const capsule = await storage.createCapsule({
        userId: newUser.id,
        name: "Primary",
        description: "Your primary identity capsule"
      });

      // Log activity
      await storage.createActivity({
        userId: newUser.id,
        type: "account-created",
        description: "Account created successfully via Hybrid Auth",
        metadata: { capsuleId: capsule.id }
      });

      // Create session
      req.session.userId = newUser.id;
      req.session.isVerified = true;

      res.status(201).json({ message: "User registered/logged in successfully via Hybrid Auth", user: userResponse });
    } catch (error) {
      console.error("Hybrid Auth (Google Bio) error:", error);
      res.status(500).json({ message: "Error during Hybrid Auth (Google Bio)" });
    }
  });
  
  // User routes
  app.post("/api/auth/register", async (req: Request, res: Response) => {
    try {
      const userData = insertUserSchema.parse(req.body);

      // Check if username is already taken
      const existingUser = await storage.getUserByUsername(userData.username);
      if (existingUser) {
        return res.status(400).json({ message: "Username already exists" });
      }

      const newUser = await storage.createUser(userData);

      // Don't return the password
      const { password, ...userResponse } = newUser;

      // Create initial identity capsule
      const capsule = await storage.createCapsule({
        userId: newUser.id,
        name: "Primary",
        description: "Your primary identity capsule"
      });

      // Log activity
      await storage.createActivity({
        userId: newUser.id,
        type: "account-created",
        description: "Account created successfully",
        metadata: { capsuleId: capsule.id }
      });

      res.status(201).json({ message: "User registered successfully", user: userResponse });
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid input", errors: error.errors });
      }
      res.status(500).json({ message: "Error registering user" });
    }
  });

  // Blockchain verification endpoint
  app.post("/api/verification/blockchain", requireAuth, async (req: Request, res: Response) => {
    try {
      const { method, metadata } = req.body;
      
      if (!method) {
        return res.status(400).json({ success: false, message: "Verification method is required" });
      }
      
      // Get the user from session
      const userId = req.session.userId!;
      const user = await storage.getUser(userId);
      
      if (!user) {
        return res.status(404).json({ success: false, message: "User not found" });
      }
      
      // Create verification record in blockchain
      const verificationData = {
        userId,
        method,
        timestamp: new Date(),
        metadata: {
          ...metadata,
          device: req.headers['user-agent'] || 'unknown'
        }
      };
      
      // Record verification in blockchain
      const blockchainResult = await blockchainService.recordVerification(verificationData);
      
      if (!blockchainResult.success) {
        return res.status(500).json({ 
          success: false, 
          message: "Failed to record verification in blockchain",
          error: blockchainResult.error
        });
      }
      
      // Update user's verified status
      const updatedUser = await storage.updateUser(userId, { 
        isVerified: true,
        updatedAt: new Date()
      });
      
      // Log verification activity
      await storage.createActivity({
        userId,
        type: "identity-verified",
        description: `Identity verified using ${method}`,
        metadata: {
          method,
          blockchainTxId: blockchainResult.transactionId,
          timestamp: new Date().toISOString()
        }
      });
      
      // Don't return the password
      const { password, ...userResponse } = updatedUser;
      
      res.status(200).json({
        success: true,
        message: "Verification recorded in blockchain successfully",
        transaction: blockchainResult.transactionId,
        user: userResponse
      });
    } catch (error) {
      console.error("Blockchain verification error:", error);
      res.status(500).json({ 
        success: false, 
        message: "Error recording verification in blockchain",
        error: error.message
      });
    }
  });
  
  // Device biometric verification endpoint
  app.post("/api/verification/device-biometric", requireAuth, async (req: Request, res: Response) => {
    try {
      const { biometricResult, biometricType } = req.body;
      
      if (!biometricResult) {
        return res.status(400).json({ success: false, message: "Biometric result is required" });
      }
      
      // Get the user from session
      const userId = req.session.userId!;
      const user = await storage.getUser(userId);
      
      if (!user) {
        return res.status(404).json({ success: false, message: "User not found" });
      }
      
      // Prepare verification data
      const verificationData = {
        userId,
        method: biometricType || "device-biometric",
        timestamp: new Date(),
        metadata: {
          device: req.headers['user-agent'] || 'unknown',
          biometricType: biometricType || 'unknown'
        }
      };
      
      // Record verification in blockchain
      const blockchainResult = await blockchainService.recordVerification(verificationData);
      
      // Update user's verified status
      const updatedUser = await storage.updateUser(userId, { 
        isVerified: true,
        updatedAt: new Date()
      });
      
      // Log verification activity
      await storage.createActivity({
        userId,
        type: "identity-verified",
        description: `Identity verified using device ${biometricType || 'biometric'}`,
        metadata: {
          method: biometricType || 'device-biometric',
          blockchainTxId: blockchainResult.transactionId,
          timestamp: new Date().toISOString()
        }
      });
      
      // Don't return the password
      const { password, ...userResponse } = updatedUser;
      
      res.status(200).json({
        success: true,
        message: `Device ${biometricType || 'biometric'} verification successful`,
        transaction: blockchainResult.transactionId,
        user: userResponse
      });
    } catch (error) {
      console.error("Device biometric verification error:", error);
      res.status(500).json({ 
        success: false, 
        message: "Error processing device biometric verification",
        error: error.message
      });
    }
  });

  // Create an HTTP server
  const httpServer = createServer(app);
  
  return httpServer;
}